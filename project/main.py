from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QLabel, QFileDialog, QMessageBox
from PyQt5.QtGui import QPixmap, QIcon

import audioTranscriber



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(684, 426)
        MainWindow.setStyleSheet("background-color: rgb(167, 199, 231);\n"
"font: 8pt \"Myanmar Text\";")
        MainWindow.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        
        self.chooseFileButton = QtWidgets.QPushButton(self.centralwidget)
        self.chooseFileButton.setGeometry(QtCore.QRect(20, 50, 100, 30))
        self.chooseFileButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.chooseFileButton.setObjectName("chooseFileButton")
        self.chooseFileButton.clicked.connect(self.chooseFile)
        self.chooseFolderButton = QtWidgets.QPushButton(self.centralwidget)
        self.chooseFolderButton.setGeometry(QtCore.QRect(150, 50, 100, 30))
        self.chooseFolderButton.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.chooseFolderButton.setObjectName("chooseFolderButton")
        self.chooseFolderButton.clicked.connect(self.chooseFolder)
        self.startButton = QtWidgets.QPushButton(self.centralwidget)
        self.startButton.setGeometry(QtCore.QRect(510, 330, 120, 40))
        self.startButton.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"")
        self.startButton.setObjectName("startButton")
        self.startButton.clicked.connect(self.start)
        self.listOfModels = QtWidgets.QComboBox(self.centralwidget)
        self.listOfModels.setGeometry(QtCore.QRect(280, 50, 100, 30))
        self.listOfModels.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.listOfModels.setObjectName("listOfModels")
        self.listOfModels.addItem("")
        self.listOfModels.addItem("")
        self.listOfModels.addItem("")
        self.listOfModels.addItem("")
        self.listOfModels.addItem("")
        self.listOfModels.addItem("")
        self.typesOfTranslator = QtWidgets.QComboBox(self.centralwidget)
        self.typesOfTranslator.setGeometry(QtCore.QRect(410, 50, 100, 30))
        self.typesOfTranslator.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.typesOfTranslator.setObjectName("typesOfTranslator")
        self.typesOfTranslator.addItem("")
        self.typesOfTranslator.addItem("")
        self.typesOfVoiceModels = QtWidgets.QComboBox(self.centralwidget)
        self.typesOfVoiceModels.setGeometry(QtCore.QRect(540, 50, 100, 30))
        self.typesOfVoiceModels.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.typesOfVoiceModels.setObjectName("typesOfVoiceModels")
        self.typesOfVoiceModels.addItem("")
        self.typesOfVoiceModels.addItem("")
        self.allCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.allCheck.setGeometry(QtCore.QRect(70, 130, 101, 21))
        self.allCheck.setObjectName("allCheck")
        self.allCheck.stateChanged.connect(self.selectAll)
        self.enCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.enCheck.setGeometry(QtCore.QRect(80, 170, 101, 21))
        self.enCheck.setObjectName("en")
        self.enCheck.stateChanged.connect(self.update_object_state)
        self.ruCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.ruCheck.setGeometry(QtCore.QRect(80, 200, 101, 21))
        self.ruCheck.setObjectName("ru")
        self.ruCheck.stateChanged.connect(self.checkbox_state_changed)
        self.frCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.frCheck.setGeometry(QtCore.QRect(80, 230, 101, 21))
        self.frCheck.setObjectName("fr")
        self.frCheck.stateChanged.connect(self.checkbox_state_changed)
        self.esCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.esCheck.setGeometry(QtCore.QRect(80, 260, 101, 21))
        self.esCheck.setObjectName("es")
        self.esCheck.stateChanged.connect(self.checkbox_state_changed)
        self.ptCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.ptCheck.setGeometry(QtCore.QRect(80, 290, 101, 21))
        self.ptCheck.setObjectName("pt")
        self.ptCheck.stateChanged.connect(self.checkbox_state_changed)
        self.deCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.deCheck.setGeometry(QtCore.QRect(80, 320, 101, 21))
        self.deCheck.setObjectName("de")
        self.deCheck.stateChanged.connect(self.checkbox_state_changed)
        self.hiCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.hiCheck.setGeometry(QtCore.QRect(80, 350, 101, 21))
        self.hiCheck.setObjectName("hi")
        self.hiCheck.stateChanged.connect(self.checkbox_state_changed)
        self.zhCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.zhCheck.setGeometry(QtCore.QRect(80, 380, 101, 21))
        self.zhCheck.setObjectName("zh-CN")
        self.zhCheck.stateChanged.connect(self.checkbox_state_changed)
        self.checkBoxes = [self.enCheck, self.ruCheck, self.frCheck, self.esCheck, self.ptCheck, self.deCheck, self.hiCheck, self.zhCheck]
        self.enWhisperChooser = QtWidgets.QComboBox(self.centralwidget)
        self.enWhisperChooser.setEnabled(False)
        self.enWhisperChooser.setGeometry(QtCore.QRect(340, 200, 100, 30))
        self.enWhisperChooser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.enWhisperChooser.setObjectName("enWhisperChooser")
        self.enWhisperChooser.addItem("")
        self.enWhisperChooser.addItem("")
        self.translateInEnglishLabel = QtWidgets.QLabel(self.centralwidget)
        self.translateInEnglishLabel.setGeometry(QtCore.QRect(310, 150, 161, 41))
        self.translateInEnglishLabel.setObjectName("translateInEnglishLabel")
        self.createVoiceLabel = QtWidgets.QLabel(self.centralwidget)
        self.createVoiceLabel.setGeometry(QtCore.QRect(485, 150, 151, 41))
        self.createVoiceLabel.setObjectName("createVoiceLabel")
        self.ctreateVoiceSwitch = QtWidgets.QComboBox(self.centralwidget)
        self.ctreateVoiceSwitch.setEnabled(True)
        self.ctreateVoiceSwitch.setGeometry(QtCore.QRect(510, 200, 100, 30))
        self.ctreateVoiceSwitch.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.ctreateVoiceSwitch.setObjectName("ctreateVoiceSwitch")
        self.ctreateVoiceSwitch.addItem("")
        self.ctreateVoiceSwitch.addItem("")
        self.audioFileLable = QtWidgets.QLabel(self.centralwidget)
        self.audioFileLable.setGeometry(QtCore.QRect(20, 10, 101, 41))
        self.audioFileLable.setObjectName("audioFileLable")
        self.destinationFolderLabel = QtWidgets.QLabel(self.centralwidget)
        self.destinationFolderLabel.setGeometry(QtCore.QRect(150, 10, 101, 41))
        self.destinationFolderLabel.setObjectName("destinationFolderLabel")
        self.whisperModelLabel = QtWidgets.QLabel(self.centralwidget)
        self.whisperModelLabel.setGeometry(QtCore.QRect(290, 10, 81, 41))
        self.whisperModelLabel.setObjectName("whisperModelLabel")
        self.translationMethodLabel = QtWidgets.QLabel(self.centralwidget)
        self.translationMethodLabel.setGeometry(QtCore.QRect(410, 10, 101, 41))
        self.translationMethodLabel.setObjectName("translationMethodLabel")
        self.voiceModelLabel = QtWidgets.QLabel(self.centralwidget)
        self.voiceModelLabel.setGeometry(QtCore.QRect(540, 10, 101, 41))
        self.voiceModelLabel.setObjectName("voiceModelLabel")
        self.SRTLabel = QtWidgets.QLabel(self.centralwidget)
        self.SRTLabel.setGeometry(QtCore.QRect(160, 130, 47, 13))
        self.SRTLabel.setObjectName("SRTLabel")
        self.audioLabel = QtWidgets.QLabel(self.centralwidget)
        self.audioLabel.setGeometry(QtCore.QRect(230, 130, 47, 13))
        self.audioLabel.setObjectName("audioLabel")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-10, 100, 701, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("horizontalLine")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(208, 170, 20, 231))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("verticalLine")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.pixmap = QPixmap('icons/grey.png')

        self.enSRTIcon = QLabel(self.centralwidget)
        self.enSRTIcon.setPixmap(self.pixmap)
        self.enSRTIcon.setGeometry(175, 172, 15, 15)
        self.ruSRTIcon = QLabel(self.centralwidget)
        self.ruSRTIcon.setPixmap(self.pixmap)
        self.ruSRTIcon.setGeometry(175, 202, 15, 15)
        self.frSRTIcon = QLabel(self.centralwidget)
        self.frSRTIcon.setPixmap(self.pixmap)
        self.frSRTIcon.setGeometry(175, 232, 15, 15)
        self.esSRTIcon = QLabel(self.centralwidget)
        self.esSRTIcon.setPixmap(self.pixmap)
        self.esSRTIcon.setGeometry(175, 262, 15, 15)
        self.ptSRTIcon = QLabel(self.centralwidget)
        self.ptSRTIcon.setPixmap(self.pixmap)
        self.ptSRTIcon.setGeometry(175, 292, 15, 15)
        self.deSRTIcon = QLabel(self.centralwidget)
        self.deSRTIcon.setPixmap(self.pixmap)
        self.deSRTIcon.setGeometry(175, 322, 15, 15)
        self.hiSRTIcon = QLabel(self.centralwidget)
        self.hiSRTIcon.setPixmap(self.pixmap)
        self.hiSRTIcon.setGeometry(175, 352, 15, 15)
        self.zhSRTIcon = QLabel(self.centralwidget)
        self.zhSRTIcon.setPixmap(self.pixmap)
        self.zhSRTIcon.setGeometry(175, 382, 15, 15)

        self.enAudioIcon = QLabel(self.centralwidget)
        self.enAudioIcon.setPixmap(self.pixmap)
        self.enAudioIcon.setGeometry(245, 172, 15, 15)
        self.ruAudioIcon = QLabel(self.centralwidget)
        self.ruAudioIcon.setPixmap(self.pixmap)
        self.ruAudioIcon.setGeometry(245, 202, 15, 15)
        self.frAudioIcon = QLabel(self.centralwidget)
        self.frAudioIcon.setPixmap(self.pixmap)
        self.frAudioIcon.setGeometry(245, 232, 15, 15)
        self.esAudioIcon = QLabel(self.centralwidget)
        self.esAudioIcon.setPixmap(self.pixmap)
        self.esAudioIcon.setGeometry(245, 262, 15, 15)
        self.ptAudioIcon = QLabel(self.centralwidget)
        self.ptAudioIcon.setPixmap(self.pixmap)
        self.ptAudioIcon.setGeometry(245, 292, 15, 15)
        self.deAudioIcon = QLabel(self.centralwidget)
        self.deAudioIcon.setPixmap(self.pixmap)
        self.deAudioIcon.setGeometry(245, 322, 15, 15)
        self.hiAudioIcon = QLabel(self.centralwidget)
        self.hiAudioIcon.setPixmap(self.pixmap)
        self.hiAudioIcon.setGeometry(245, 352, 15, 15)
        self.zhAudioIcon = QLabel(self.centralwidget)
        self.zhAudioIcon.setPixmap(self.pixmap)
        self.zhAudioIcon.setGeometry(245, 382, 15, 15)

        self.retranslateUi(MainWindow)
        self.listOfModels.setCurrentIndex(1)
        self.enWhisperChooser.setCurrentIndex(0)
        self.ctreateVoiceSwitch.setCurrentIndex(0)
        self.ctreateVoiceSwitch.setEnabled(False)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setWindowTitle('YouTube Helper by Aleksandr Voronkov')
        MainWindow.setWindowIcon(QIcon('icons/Voronkov.ico'))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.chooseFileButton.setText(_translate("MainWindow", "Choose file"))
        self.chooseFolderButton.setText(_translate("MainWindow", "Choose folder"))
        self.startButton.setText(_translate("MainWindow", "START"))
        self.listOfModels.setItemText(0, _translate("MainWindow", "tiny"))
        self.listOfModels.setItemText(1, _translate("MainWindow", "base"))
        self.listOfModels.setItemText(2, _translate("MainWindow", "small"))
        self.listOfModels.setItemText(3, _translate("MainWindow", "medium"))
        self.listOfModels.setItemText(4, _translate("MainWindow", "large"))
        self.listOfModels.setItemText(5, _translate("MainWindow", "large-v2"))
        self.typesOfTranslator.setItemText(0, _translate("MainWindow", "Sentence"))
        self.typesOfTranslator.setItemText(1, _translate("MainWindow", "Line by line"))
        self.typesOfVoiceModels.setItemText(0, _translate("MainWindow", "bark-small"))
        self.typesOfVoiceModels.setItemText(1, _translate("MainWindow", "bark"))
        self.allCheck.setText(_translate("MainWindow", "Select all"))
        self.enCheck.setText(_translate("MainWindow", "English"))
        self.ruCheck.setText(_translate("MainWindow", "Russian"))
        self.frCheck.setText(_translate("MainWindow", "French"))
        self.esCheck.setText(_translate("MainWindow", "Spanish"))
        self.ptCheck.setText(_translate("MainWindow", "Portuguese"))
        self.deCheck.setText(_translate("MainWindow", "German"))
        self.hiCheck.setText(_translate("MainWindow", "Hindi"))
        self.zhCheck.setText(_translate("MainWindow", "Chinese"))
        self.enWhisperChooser.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.enWhisperChooser.setItemText(0, _translate("MainWindow", "No"))
        self.enWhisperChooser.setItemText(1, _translate("MainWindow", "Yes"))
        self.translateInEnglishLabel.setText(_translate("MainWindow", "Translate in English by Whisper"))
        self.createVoiceLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Create voice dubs</span></p></body></html>"))
        self.ctreateVoiceSwitch.setToolTip(_translate("MainWindow", "<html><head/><body><p align=\"center\"><br/></p></body></html>"))
        self.ctreateVoiceSwitch.setItemText(0, _translate("MainWindow", "No"))
        self.ctreateVoiceSwitch.setItemText(1, _translate("MainWindow", "Yes"))
        self.audioFileLable.setText(_translate("MainWindow", "Original audio file"))
        self.destinationFolderLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Destination folder</p></body></html>"))
        self.whisperModelLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Whisper model</p></body></html>"))
        self.translationMethodLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Translation method</p></body></html>"))
        self.voiceModelLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\">Voice model</p></body></html>"))
        self.SRTLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">SRT</span></p></body></html>"))
        self.audioLabel.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600;\">Audio</span></p></body></html>"))

        
    def checkbox_state_changed(self):
        at_least_one_checked = any(checkbox.isChecked() for checkbox in self.checkBoxes)
        self.ctreateVoiceSwitch.setEnabled(at_least_one_checked)

    def update_object_state(self):
        is_enabled = self.enCheck.isChecked()
        self.enWhisperChooser.setEnabled(is_enabled)
        self.checkbox_state_changed()

    def selectAll(self, state):
        for checkBoxe in self.checkBoxes:
            checkBoxe.setCheckState(state)

    def chooseFile(self):
        fileName, _ = QFileDialog.getOpenFileName()
        if fileName:
            audioTranscriber.audioFilePath = fileName
    
    def chooseFolder(self):
        directoryPath = QFileDialog.getExistingDirectory()
        if directoryPath:
            audioTranscriber.directory = directoryPath

    def start(self):
        if audioTranscriber.audioFilePath:
            audioTranscriber.transcribeAudio(self)
                    
        else:
            QMessageBox.critical(None, "Error", "You din't choose a file")

    def chageToRed(self, name, type):
        pixmap = QPixmap("icons/red.png")
        temp = getattr(self, name[:2] + type + "Icon")
        temp.setPixmap(pixmap)
    
    def chageToGreen(self, name, type):
        pixmap = QPixmap("icons/green.png")
        temp = getattr(self, name[:2] + type + "Icon")
        temp.setPixmap(pixmap)

    def chageToGrey(self, name, type):
        pixmap = QPixmap("icons/grey.png")
        temp = getattr(self, name[:2] + type + "Icon")
        temp.setPixmap(pixmap)




def main():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

main()
